<?php
/**
 * @author stev leibelt <artodeto@arcor.de>
 * @since 2013-05-26 
 */
namespace Net\Bazzline\KnowledgeTest\Command;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class TestCommand
 *
 * @package Net\Bazzline\KnowledgeTest\Command
 * @author stev leibelt <artodeto@arcor.de>
 * @since 2013-05-26
 */
class TestCommand extends CommandAbstract
{
    /**
     * @var array
     * @author stev leibelt <artodeto@arcor.de>
     * @since 2013-05-26
     */
    private $pathsToSuites;

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int|null|void
     * @author stev leibelt <artodeto@arcor.de>
     * @since 2013-05-26
     */
    public function execute(InputInterface $input, OutputInterface $output)
    {
        $this->setupPathsToSuites($input, $output);

        if (empty($this->pathsToSuites)) {
            $this->addError($output, 'No suites available.');
        } else {
            $suites = array();
            $suiteFactory = $this->getServiceLocator()->getSuiteFactory();

            foreach ($this->pathsToSuites as $pathToSuite) {
                $factory = $suiteFactory->getFactoryByFilename($pathToSuite);
                $suites[] = $factory->fromSource($pathToSuite);
            }
        }
    }

    /**
     * @author stev leibelt <artodeto@arcor.de>
     * @since 2013-05-26
     */
    protected  function configure()
    {
        $this
            ->setName('test')
            ->setDescription('Starts the available tests.')
            ->setDefinition(
                array(
                    new InputArgument('testCase', InputArgument::OPTIONAL, 'Provided path to test case.'),
                    new InputArgument('suite', InputArgument::OPTIONAL, 'Provided path to test case suite.'),
                    new InputArgument('path', InputArgument::OPTIONAL, 'Provided path to search for suites.', getcwd())
                )
            )
            ->setHelp(
                'The <info>%command.name%</info> command is executing all ' . PHP_EOL .
                'availalbe test pathsToSuites.' . PHP_EOL
            )
        ;
    }

    /**
     * Setup pathsToSuites
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return OutputInterface
     * @author stev leibelt <artodeto@arcor.de>
     * @since 2013-05-26
     */
    private function setupPathsToSuites(InputInterface $input, OutputInterface $output)
    {
        $pathToSuite = $input->getArgument('suite');
        $pathToSearchForSuites = $input->getArgument('path');
        $pathToTestCase = $input->getArgument('testCase');

        $suites = (!is_null($pathToSuite)) ? array($pathToSuite) : array();

        if (!is_null($pathToTestCase)) {
            $output = $this->addComment($output, 'Using test case "' . $pathToTestCase . '"');
            $testCaseFactory = $this
                ->getServiceLocator()
                ->getTestCaseFactory()
                ->getFactoryByFilename($pathToTestCase);
            $testCase = $testCaseFactory->fromSource($pathToTestCase);
            $suite = $this
                ->getServiceLocator()
                ->getNewSuite();
            $output = $this->addComment($output, 'Creating suite for given test case');
            $suite->setName('Autogenerated suite');
            $suite->addTestCase($testCase);
            $suites[] = $suite;
        } else {
            $suiteFactory = $this
                ->getServiceLocator()
                ->getSuiteFactory();

            if ($pathToSuite) {
                $output = $this->addComment($output, 'Using suite "' . $pathToSuite . '"');
                $suites[] = $suiteFactory
                    ->getFactoryByFilename((string) $pathToSuite)
                    ->fromSource((string) $pathToSuite);
            } else {
                $output = $this->addComment($output, 'Searching for pathsToSuites in path "' . $pathToSearchForSuites . '"');
                $suiteIterator = $this
                    ->getServiceLocator()
                    ->getNewSuiteFilterDirectoryIterator($pathToSearchForSuites);
                foreach ($suiteIterator as $pathToSuite) {
                    $suites[] = $suiteFactory
                        ->getFactoryByFilename((string) $pathToSuite)
                        ->fromSource((string) $pathToSuite);

                    $output = $this->addInfo($output, 'Found suite "' . $pathToSuite . '"');
                }
            }

echo 'suites: ' . var_export($suites, true) . PHP_EOL;
        }

        $this->pathsToSuites = $suites;

        return $output;
    }
}
